#lang racket
(char? 'a)
(char? #\a)
(char? #'a)
(char? #\1)
(char=? #\a #\b)
(char=? #\a #\a)
(char->integer #\a)
(char->integer #\1);change the char into ascii code
(integer->char 32)
(define (int->char from to)
  (if (> from to)
      null
      (begin (display (integer->char from)) (newline) (int->char (+ from 1) to))))
(int->char 0 256)
(char<? #\a #\space)
(char<=? #\a #\space)
(char>? #\a #\space)
(char>=? #\a #\space)
(char-ci=? #\a #\space)
(char-ci=? #\a #\A)
(char=? #\a #\A)
(display "------------\n")
(char-alphabetic? #\a) 
(char-numeric? #\2) 
(char-whitespace? #\2)
(char-upper-case? #\2) 
(char-lower-case? #\2)

(char-upcase #\a)
(char-upcase #\space)
(char-downcase #\A)
(string? "s")
(string? #\s)
(make-string 5 #\a)
(string-length "liangxingguang")
(string=? "a" "a")
(string=? "a" "A")
(string-ref "liangxingguang" 3)
(define s (string #\A #\p #\p #\l #\e)) 
(string-set! s 4 #\a) 
(define a (substring "liangxingguang" 0 4))
a
(string-append a "xingguang" "work")
a
(define b (string->list "liangxingguang"))
b
;(list->string '(a b d))
(list->string '(#\a #\b #\c))
(define c (string-copy "liis"))
c
(reverse)