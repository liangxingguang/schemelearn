#lang racket
;cons takes two arguments the first one is any S-expression
;the second one is any list
;the result must be list
(define a 'peanut)
(define l '(butter and jelly))
(cons a l)
(set! a '(banana and))
(set! l '(peanut butter and jelly))
(cons a l)
(set! a '((help) this))
(set! l '(is very ((hard) to learn)))
(cons a l)
(set! a '(a b (c)))
(set! l '())
(cons a l)
(set! a 'a)
(set! l '())
(cons a l)
(set! a '((a b c)))
(set! l 'b)
(cons a l)
(set! a 'a)
(set! l 'b)
(cons a l)
(set! a 'a)
(set! l '((b) c d))
(cons a (car l))
(cons a (cdr l))